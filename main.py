import streamlit as st
import os
import sys
from datetime import datetime
import time

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append('.')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="ü§ñ –ò–ò-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –∫–æ–º–∞–Ω–¥—ã",
    page_icon="ü§ñ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("ü§ñ –ò–ò-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –∫–æ–º–∞–Ω–¥—ã")
st.markdown("–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –¥–æ—Å—Ç—É–ø–∞—Ö, —Å–∏—Å—Ç–µ–º–∞—Ö –∏ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö –∫–æ–º–∞–Ω–¥—ã")

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ —É—Ç–∏–ª–∏—Ç—ã
from utils.simple_chat import ask_gigachat_simple
from langchain_community.embeddings import HuggingFaceEmbeddings
from langchain_community.vectorstores import Chroma

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∑–Ω–∞–Ω–∏–π
with st.sidebar:
    st.header("üì§ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
    
    # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ —Ñ–∞–º–∏–ª–∏–∏ –∞–≤—Ç–æ—Ä–∞
    author = st.text_input("üë§ –í–∞—à–∞ —Ñ–∞–º–∏–ª–∏—è:", placeholder="–ò–≤–∞–Ω–æ–≤–∞")
    
    # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    info_type = st.selectbox(
        "–¢–∏–ø –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:", 
        ["–ü—Ä–æ—Ü–µ—Å—Å/–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", "–ü—Ä–æ–µ–∫—Ç/–°—Å—ã–ª–∫–∏", "–î–æ—Å—Ç—É–ø —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", "–î—Ä—É–≥–æ–µ"]
    )
    
    if not author:
        st.warning("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é")
    
    # –§–æ—Ä–º—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    if info_type == "–ü—Ä–æ—Ü–µ—Å—Å/–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è":
        st.subheader("üìã –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å")
        process_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞:")
        steps = st.text_area("–®–∞–≥–∏ (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É):", height=150,
                           placeholder="1. –ü–µ—Ä–≤—ã–π —à–∞–≥\n2. –í—Ç–æ—Ä–æ–π —à–∞–≥\n3. –¢—Ä–µ—Ç–∏–π —à–∞–≥")
        tags = st.text_input("–¢–µ–≥–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):", placeholder="#–ø–æ—Å—Ç–∞–≤–∫–∞ #–¥–µ–ø–ª–æ–π")
        
        if st.button("‚úÖ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å") and author:
            if process_name and steps:
                new_text = f"""[–¢–ò–ü]: –ü—Ä–æ—Ü–µ—Å—Å
[–ù–ê–ó–í–ê–ù–ò–ï]: {process_name}
[–®–ê–ì–ò]:
{steps}
[–¢–ï–ì–ò]: {tags}
"""
                try:
                    from utils.knowledge_base import KnowledgeBase
                    kb = KnowledgeBase()
                    if kb.add_document(new_text, f"process_{process_name}.txt", author):
                        st.success("‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π!")
                        time.sleep(2)
                        st.rerun()
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            else:
                st.warning("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —à–∞–≥–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞")
    
    elif info_type == "–ü—Ä–æ–µ–∫—Ç/–°—Å—ã–ª–∫–∏":
        st.subheader("üîó –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç")
        project_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:")
        links = st.text_area("–°—Å—ã–ª–∫–∏ (–Ω–∞–∑–≤–∞–Ω–∏–µ: —Å—Å—ã–ª–∫–∞):", height=150,
                          placeholder="OpenShift: https://console.openshift.com\nGrafana: https://grafana.com")
        description = st.text_area("–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:")
        tags = st.text_input("–¢–µ–≥–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):", placeholder="#–ø—Ä–æ–º #–±–ª–æ–∫1")
        
        if st.button("‚úÖ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç") and author:
            if project_name:
                new_text = f"""[–¢–ò–ü]: –ü—Ä–æ–µ–∫—Ç  
[–ù–ê–ó–í–ê–ù–ò–ï]: {project_name}
[–°–°–´–õ–ö–ò]:
{links}
[–û–ü–ò–°–ê–ù–ò–ï]: {description}
[–¢–ï–ì–ò]: {tags}
"""
                try:
                    from utils.knowledge_base import KnowledgeBase
                    kb = KnowledgeBase()
                    if kb.add_document(new_text, f"project_{project_name}.txt", author):
                        st.success("‚úÖ –ü—Ä–æ–µ–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π!")
                        time.sleep(2)
                        st.rerun()
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            else:
                st.warning("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞")
    
    elif info_type == "–î–æ—Å—Ç—É–ø —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞":
        st.subheader("üë• –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø")
        employee = st.text_input("–§–∞–º–∏–ª–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:")
        system = st.text_input("–°–∏—Å—Ç–µ–º–∞/–†–µ—Å—É—Ä—Å:")
        date = st.text_input("–î–∞—Ç–∞ –¥–æ—Å—Ç—É–ø–∞:", placeholder=datetime.now().strftime('%Y-%m-%d'))
        comment = st.text_area("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:")
        tags = st.text_input("–¢–µ–≥–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):", placeholder="#–¥–æ—Å—Ç—É–ø #crm")
        
        if st.button("‚úÖ –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø") and author:
            if employee and system:
                new_text = f"""[–¢–ò–ü]: –î–æ—Å—Ç—É–ø
[–°–û–¢–†–£–î–ù–ò–ö]: {employee}
[–°–ò–°–¢–ï–ú–ê]: {system}
[–î–ê–¢–ê]: {date if date else datetime.now().strftime('%Y-%m-%d')}
[–ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô]: {comment}
[–¢–ï–ì–ò]: {tags}
"""
                try:
                    from utils.knowledge_base import KnowledgeBase
                    kb = KnowledgeBase()
                    if kb.add_document(new_text, f"access_{employee}.txt", author):
                        st.success("‚úÖ –î–æ—Å—Ç—É–ø –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π!")
                        time.sleep(2)
                        st.rerun()
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            else:
                st.warning("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏ —Å–∏—Å—Ç–µ–º—É")
    
    else:
        st.subheader("üìù –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        title = st.text_input("–ó–∞–≥–æ–ª–æ–≤–æ–∫:")
        content = st.text_area("–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:", height=200)
        tags = st.text_input("–¢–µ–≥–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):")
        
        if st.button("üìù –î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é") and author:
            if content:
                filename = f"info_{title.lower().replace(' ', '_')}.txt" if title else "user_input.txt"
                new_text = f"""[–¢–ò–ü]: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
[–ó–ê–ì–û–õ–û–í–û–ö]: {title}
[–°–û–î–ï–†–ñ–ê–ù–ò–ï]: {content}
[–¢–ï–ì–ò]: {tags}
"""
                try:
                    from utils.knowledge_base import KnowledgeBase
                    kb = KnowledgeBase()
                    if kb.add_document(new_text, filename, author):
                        st.success("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π!")
                        time.sleep(2)
                        st.rerun()
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            else:
                st.warning("–í–≤–µ–¥–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")

# –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
st.header("üí¨ –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
@st.cache_resource
def init_knowledge_base():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
    try:
        embeddings = HuggingFaceEmbeddings(
            model_name='sentence-transformers/paraphrase-multilingual-mpnet-base-v2',
            model_kwargs={'device': 'cpu'}
        )
        
        vector_db = Chroma(
            persist_directory="./chroma_db",
            embedding_function=embeddings
        )
        
        st.success("‚úÖ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        return vector_db
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {e}")
        return None

# –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
vector_db = init_knowledge_base()

if vector_db is None:
    st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É chroma_db/")
    st.stop()

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–π —Ü–µ–ø–æ—á–∫–∏ –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç
def create_simple_qa_chain(_vector_db):
    """–ü—Ä–æ—Å—Ç–∞—è —Ü–µ–ø–æ—á–∫–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤"""
    
    def simple_qa(query):
        try:
            # –ò—â–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
            relevant_docs = _vector_db.similarity_search(query, k=3)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            context = "\n\n".join([doc.page_content for doc in relevant_docs])
            
            if not context:
                return {
                    "result": "ü§∑‚Äç‚ôÄÔ∏è –í –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —ç—Ç–æ–º—É –≤–æ–ø—Ä–æ—Å—É",
                    "source_documents": []
                }
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à –ø—Ä–æ—Å—Ç–æ–π –∞–¥–∞–ø—Ç–µ—Ä
            answer = ask_gigachat_simple(query, context)
            
            return {
                "result": answer,
                "source_documents": relevant_docs
            }
            
        except Exception as e:
            return {
                "result": f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}",
                "source_documents": []
            }
    
    return simple_qa

# –°–æ–∑–¥–∞–µ–º —Ü–µ–ø–æ—á–∫—É
qa_chain = create_simple_qa_chain(vector_db)

# –ü–æ–ª–µ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞
question = st.text_input(
    "–í–∞—à –≤–æ–ø—Ä–æ—Å:",
    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ CRM? –ò–ª–∏: –ö–∞–∫–∏–µ –ø—Ä–æ–µ–∫—Ç—ã –µ—Å—Ç—å —É –Ω–∞—Å?",
    key="question_input"
)

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞
if st.button("üîç –ù–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç", type="primary") or question:
    if question:
        with st.spinner("ü§î –ò—â—É –æ—Ç–≤–µ—Ç..."):
            try:
                # –ò—â–µ–º –æ—Ç–≤–µ—Ç
                result = qa_chain(question)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
                st.success("‚úÖ –û—Ç–≤–µ—Ç –Ω–∞–π–¥–µ–Ω!")
                st.markdown(f"**–û—Ç–≤–µ—Ç:** {result['result']}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏
                with st.expander("üìö –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"):
                    if result['source_documents']:
                        for i, doc in enumerate(result['source_documents']):
                            source = doc.metadata.get('source', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫')
                            filename = os.path.basename(source)
                            st.markdown(f"**{i+1}. {filename}**")
                            st.caption(doc.page_content[:200] + "..." if len(doc.page_content) > 200 else doc.page_content)
                            st.markdown("---")
                    else:
                        st.info("–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                        
            except Exception as e:
                error_msg = str(e)
                st.error(f"‚ùå –û—à–∏–±–∫–∞: {error_msg}")
    else:
        st.warning("–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞")

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫
with st.expander("üîç –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫", expanded=False):
    st.write("–ü–æ–∏—Å–∫ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —Ç–µ–≥–∞–º –∏–ª–∏ —Ñ—Ä–∞–∑–∞–º:")
    exact_search = st.text_input("–¢–æ—á–Ω—ã–π –ø–æ–∏—Å–∫:", placeholder="#–±1 –∏–ª–∏ openshift", key="exact_search")
    
    if st.button("–ò—Å–∫–∞—Ç—å –≤ —Ñ–∞–π–ª–∞—Ö") and exact_search:
        with st.spinner("üîç –ò—â—É –≤ —Ñ–∞–π–ª–∞—Ö..."):
            try:
                import glob
                found_files = []
                
                for filepath in glob.glob("data/*.txt"):
                    with open(filepath, 'r', encoding='utf-8') as f:
                        content = f.read()
                        if exact_search.lower() in content.lower():
                            found_files.append((filepath, content))
                
                if found_files:
                    st.success(f"üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(found_files)}")
                    for filepath, content in found_files:
                        filename = os.path.basename(filepath)
                        with st.expander(f"üìÑ {filename}"):
                            st.text(content[:500] + "..." if len(content) > 500 else content)
                else:
                    st.info("ü§∑‚Äç‚ôÄÔ∏è –ü–æ —Ç–æ—á–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")

# –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –≤ —Ñ—É—Ç–µ—Ä–µ
st.sidebar.markdown("---")
st.sidebar.info(f"üîÑ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.now().strftime('%H:%M:%S')}")

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
with st.sidebar.expander("‚ÑπÔ∏è –û —Å–∏—Å—Ç–µ–º–µ"):
    st.write("""
    **–ò–ò-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –∫–æ–º–∞–Ω–¥—ã** v1.0
    
    –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:
    - GigaChat API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤
    - ChromaDB –¥–ª—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    - SentenceTransformers –¥–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
    - Streamlit –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    
    üìä –°—Ç–∞—Ç—É—Å: {"‚úÖ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π", "‚úÖ –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å", "‚úÖ API-–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"}
    """)

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
if __name__ == "__main__":
    # –≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞ –¥–ª—è Streamlit, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    pass

